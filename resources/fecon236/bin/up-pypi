#!/usr/bin/env bash
#              bash 4.3.11(1)   Linux 3.13.0 Ubuntu 14.04.3   Date : 2018-06-11
#
# _______________|  up-pypi :: ADMIN create and upload dist wheel to PyPI.org
#
#           Usage:  $ ./bin/up-pypi  [optional: versioned]
#                   # ^MUST BE EXECUTED from project's ROOT directory !!
#
#         Example:  $ ./bin/up-pypi 10.6.5a50
#
#    Dependencies:  python2 or python3: Pick in "Create WHEEL" section.
#                   setup.py file which reads container VERSION file.
#                   PROJECT/__init__.py with __version__ variable.
#                   twine >= 1.09
#                   PyPI login credentials  [PROJECT admins only]
#
#           Notes:  twine will create three scratch directories:
#                       build, dist, and PROJECT.egg-info
#
#  CHANGE LOG  LATEST version available: https://git.io/fecon236
#  2018-06-11  Auto-commit __version__. Clean messages with ver variable.
#  2018-06-10  Update __version__ in PROJECT __init__.py
#  2018-05-11  Delete prior dist/*.whl, else PyPI returns error.
#  2018-05-02  Add sanity check and warn re --universal wheel.
#  2018-05-01  First version.


#           _____ PREAMBLE_v3: settings, variables, and error handling.
#
LC_ALL=POSIX
#      locale means "ASCII, US English, no special rules, 
#      output per ISO and RFC standards." 
#      Esp. use ASCII encoding for glob and sorting characters. 
shopt -s   extglob
#     ^set extended glob for pattern matching.
shopt -s   failglob
#         ^failed pattern matching signals error.
set -e
#   ^errors checked: immediate exit if a command has non-zero status. 
set -o pipefail
#   ^exit status on fail within pipe, not (default) last command.
set -u
#   ^unassigned variables shall be errors.
#    Example of default VARIABLE ASSIGNMENT:  arg1=${1:-'foo'}

versioned=${1:-'0'}

program=${0##*/}   #  similar to using basename
memf=$( mktemp /dev/shm/88_${program}_tmp.XXXXXXXXXX )
mem2=$( mktemp /dev/shm/88_${program}_tmp.XXXXXXXXXX )
errf=$( mktemp /dev/shm/88_${program}_tmp.XXXXXXXXXX )


cleanup () {
     #  Delete temporary files, then optionally exit given status.
     local status=${1:-'0'}
     rm -f $memf $mem2 $errf
     [ $status = '-1' ] ||  exit $status      #  thus -1 prevents exit.
} #--------------------------------------------------------------------
warn () {
     #  Message with basename to stderr.          Usage: warn "message"
     echo -e "\n !!  ${program}: $1 "  >&2
} #--------------------------------------------------------------------
die () {
     #  Exit with status of most recent command or custom status, after
     #  cleanup and warn.      Usage: command || die "message" [status]
     local status=${2:-"$?"}
     cat $errf >&2
     cleanup -1  &&   warn "$1"  &&  exit $status
} #--------------------------------------------------------------------
trap "die 'SIG disruption, but cleanup finished.' 114" 1 2 3 15
#    Cleanup after INTERRUPT: 1=SIGHUP, 2=SIGINT, 3=SIGQUIT, 15=SIGTERM
trap "die 'unhandled ERR via trap, but cleanup finished.' 116" ERR
#    Cleanup after command failure unless it's part of a test clause.
#
# _______________     ::  BEGIN  Script ::::::::::::::::::::::::::::::::::::::::

PROJECT='fecon236'

[ -e 'VERSION' ]  ||  die "No VERSION file. Perhaps wrong directory level?" 113


if [ $versioned != '0' ] ; then
     echo "$versioned" > VERSION
fi

#  Definitive VERSION expressed in bash variable:
ver="$(cat VERSION)"


#  Use definitive VERSION, to update __version__ variable in __init__.py:  <=!
cat ${PROJECT}/__init__.py  >  $mem2
sed -e "/^__version__/s/=.*/= '$ver'/"  $mem2  >  ${PROJECT}/__init__.py


#       __________ Create WHEEL

#  But first, remove prior wheels, else PyPI complains of duplicates:
rm dist/*.whl  ||  warn "Unexpected state in dist directory."


warn "Creating Universal wheel for python2/3 code, NOT Pure wheel."
#            --universal refers to python2/3 straddling code:
python2 setup.py bdist_wheel --universal  > $memf  2> $errf

#  #  Pure wheel for Python 3 only:
#  #  [ ] - Modify "python_requires" in setup.py
#  python3 setup.py bdist_wheel  > $memf  2> $errf

echo " ::  ${program}: setup.py has read VERSION as $ver "


#       __________ UPLOAD wheel to PyPI
#       Expect PyPI prompts to provide username and password...
warn "[Bad twine prompt]  ENTER PyPI USERNAME after the next 'Uploading' line >"
twine upload dist/*  2>> $errf
#                 ^lazy, since previous wheels will be uploaded.
echo " ::  ${program}: twine DONE, confirm: https://pypi.org/project/$PROJECT "


#       __________ POST-SUCCESS
git add ${PROJECT}/__init__.py  \
     &&  git commit -m "Bump __version__ to $ver via $program"
echo " ::  ${program}: SUCCESS, and auto-commit of __version__."
echo " ::  Manage project https://pypi.org/manage/project/${PROJECT}/releases "


cleanup    #  Instead of: trap arg EXIT
# _______________ EOS ::  END of Script ::::::::::::::::::::::::::::::::::::::::


#  timestamp=$( date '+%Y-%m-%d %H:%M' )
#                     ^ISO date ^24-hour local time.


#  vim: set fileencoding=utf-8 ff=unix tw=78 ai syn=sh :
